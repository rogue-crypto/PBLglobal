<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard - Tournament Applications</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    .card {
      margin-bottom: 20px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .card-header {
      background-color: #f8f9fa;
      font-weight: bold;
    }
    .application-details {
      display: none;
    }
    .player-photo {
      max-width: 100px;
      max-height: 100px;
      border-radius: 4px;
    }
    .action-buttons {
      display: flex;
      gap: 10px;
    }
    .status-badge {
      font-size: 0.85rem;
    }
    .timestamp {
      font-size: 0.8rem;
      color: #6c757d;
    }
    .approval-link {
      word-break: break-all;
      background-color: #f8f9fa;
      padding: 10px;
      border-radius: 4px;
      margin-top: 10px;
    }
    #toast-container {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1050;
    }
  </style>
</head>
<body>
  <div class="container my-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1>Tournament Application Administration</h1>
      <div>
        <a href="/logout" class="btn btn-outline-secondary">Logout</a>
      </div>
    </div>

    <div class="row mb-4">
      <div class="col-md-4">
        <div class="card bg-primary text-white">
          <div class="card-body">
            <h5 class="card-title">Pending Applications</h5>
            <h2 id="pending-count">0</h2>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="card bg-success text-white">
          <div class="card-body">
            <h5 class="card-title">Approved Applications</h5>
            <h2 id="approved-count">0</h2>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <div class="card bg-danger text-white">
          <div class="card-body">
            <h5 class="card-title">Rejected Applications</h5>
            <h2 id="rejected-count">0</h2>
          </div>
        </div>
      </div>
    </div>

    <ul class="nav nav-tabs mb-4" id="statusTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="all-tab" data-bs-toggle="tab" data-bs-target="#all" type="button" role="tab">
          All Applications
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="pending-tab" data-bs-toggle="tab" data-bs-target="#pending" type="button" role="tab">
          Pending
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="approved-tab" data-bs-toggle="tab" data-bs-target="#approved" type="button" role="tab">
          Approved
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="rejected-tab" data-bs-toggle="tab" data-bs-target="#rejected" type="button" role="tab">
          Rejected
        </button>
      </li>
    </ul>

    <div class="tab-content" id="statusTabContent">
      <div class="tab-pane fade show active" id="all" role="tabpanel"></div>
      <div class="tab-pane fade" id="pending" role="tabpanel"></div>
      <div class="tab-pane fade" id="approved" role="tabpanel"></div>
      <div class="tab-pane fade" id="rejected" role="tabpanel"></div>
    </div>

    <div id="applications-container">
      <div class="d-flex justify-content-center" id="loading">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <div id="applications-list"></div>
    </div>
  </div>

  <!-- Approval Link Modal -->
  <div class="modal fade" id="approvalLinkModal" tabindex="-1" aria-labelledby="approvalLinkModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="approvalLinkModalLabel">Approval Link</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>Send the following link to authorize this school's application:</p>
          <div class="approval-link" id="approvalLinkContainer"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" onclick="copyApprovalLink()">Copy Link</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Rejection Modal -->
  <div class="modal fade" id="rejectionModal" tabindex="-1" aria-labelledby="rejectionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="rejectionModalLabel">Reject Application</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="rejectionForm">
            <input type="hidden" id="rejectApplicationId">
            <div class="mb-3">
              <label for="rejectionReason" class="form-label">Reason for Rejection</label>
              <textarea class="form-control" id="rejectionReason" rows="3" required></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" onclick="rejectApplication()">Reject Application</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Player Details Modal -->
  <div class="modal fade" id="playerDetailsModal" tabindex="-1" aria-labelledby="playerDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="playerDetailsModalLabel">Player Details</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="playerDetailsContainer"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Toast container -->
  <div id="toast-container"></div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let applications = [];
    let currentApplicationId = null;
    let approvalUrl = '';

    // Fetch all applications on page load
    document.addEventListener('DOMContentLoaded', function() {
      fetchApplications();
    });

    function fetchApplications() {
      // In a real implementation, this would be an API call
      // For this template, we'll simulate data based on the server.js structure
      fetch('/api/registrars')
        .then(response => response.json())
        .then(data => {
          applications = data;
          updateCounts();
          renderApplications();
          document.getElementById('loading').style.display = 'none';
        })
        .catch(error => {
          console.error('Error fetching applications:', error);
          document.getElementById('loading').style.display = 'none';
          document.getElementById('applications-list').innerHTML = 
            '<div class="alert alert-danger">Failed to load applications. Please try again later.</div>';
        });
    }

    function updateCounts() {
      const pending = applications.filter(app => app.status === 'pending').length;
      const approved = applications.filter(app => app.status === 'approved').length;
      const rejected = applications.filter(app => app.status === 'rejected').length;
      
      document.getElementById('pending-count').textContent = pending;
      document.getElementById('approved-count').textContent = approved;
      document.getElementById('rejected-count').textContent = rejected;
    }

    function renderApplications() {
      const allContainer = document.getElementById('all');
      const pendingContainer = document.getElementById('pending');
      const approvedContainer = document.getElementById('approved');
      const rejectedContainer = document.getElementById('rejected');
      
      // Clear previous content
      allContainer.innerHTML = '';
      pendingContainer.innerHTML = '';
      approvedContainer.innerHTML = '';
      rejectedContainer.innerHTML = '';
      
      if (applications.length === 0) {
        allContainer.innerHTML = '<div class="alert alert-info">No applications found.</div>';
        pendingContainer.innerHTML = '<div class="alert alert-info">No pending applications.</div>';
        approvedContainer.innerHTML = '<div class="alert alert-info">No approved applications.</div>';
        rejectedContainer.innerHTML = '<div class="alert alert-info">No rejected applications.</div>';
        return;
      }
      
      // Sort applications by date (newest first)
      applications.sort((a, b) => new Date(b.registrationDate) - new Date(a.registrationDate));
      
      applications.forEach(app => {
        const appCard = createApplicationCard(app);
        
        // Add to all tab
        allContainer.appendChild(appCard.cloneNode(true));
        
        // Add to specific status tab
        if (app.status === 'pending') {
          pendingContainer.appendChild(appCard.cloneNode(true));
        } else if (app.status === 'approved') {
          approvedContainer.appendChild(appCard.cloneNode(true));
        } else if (app.status === 'rejected') {
          rejectedContainer.appendChild(appCard.cloneNode(true));
        }
      });
      
      // Add event listeners after adding cards to DOM
      addEventListeners();
    }

    function createApplicationCard(app) {
      const card = document.createElement('div');
      card.className = 'card mb-3';
      card.dataset.id = app._id;
      
      // Determine badge color based on status
      let badgeClass = 'bg-primary';
      if (app.status === 'approved') badgeClass = 'bg-success';
      if (app.status === 'rejected') badgeClass = 'bg-danger';
      
      const registrationDate = new Date(app.registrationDate).toLocaleString();
      
      card.innerHTML = `
        <div class="card-header d-flex justify-content-between align-items-center">
          <div>
            <span class="me-2">${app.schoolName}</span>
            <span class="badge ${badgeClass} status-badge">${app.status.toUpperCase()}</span>
          </div>
          <button class="btn btn-sm btn-outline-primary toggle-details">
            <i class="fas fa-chevron-down"></i> Details
          </button>
        </div>
        <div class="card-body">
          <div class="row mb-3">
            <div class="col-md-6">
              <p><strong>Email:</strong> ${app.email}</p>
              <p><strong>Authorizing Person:</strong> ${app.authorizingPerson}</p>
              <p class="timestamp"><strong>Registration Date:</strong> ${registrationDate}</p>
            </div>
            <div class="col-md-6 text-md-end">
              <div class="action-buttons">
                ${app.status === 'pending' ? `
                  <button class="btn btn-success generate-approval" data-id="${app._id}">
                    <i class="fas fa-link"></i> Generate Approval Link
                  </button>
                  <button class="btn btn-danger show-rejection-modal" data-id="${app._id}">
                    <i class="fas fa-times"></i> Reject
                  </button>
                ` : ''}
                <button class="btn btn-info view-players" data-id="${app._id}">
                  <i class="fas fa-users"></i> View Players
                </button>
              </div>
            </div>
          </div>
          
          <div class="application-details">
            ${app.status === 'rejected' ? `
              <div class="alert alert-danger">
                <strong>Rejection Reason:</strong> ${app.rejectionReason || 'No reason provided'}
              </div>
            ` : ''}
            
            ${app.approvalToken ? `
              <div class="alert alert-info">
                <strong>Approval Link Available</strong> - Expires: ${new Date(app.approvalExpires).toLocaleString()}
                <button class="btn btn-sm btn-primary ms-2 show-approval-link" data-id="${app._id}">
                  <i class="fas fa-external-link-alt"></i> Show Link
                </button>
              </div>
            ` : ''}
          </div>
        </div>
      `;
      
      return card;
    }

    function addEventListeners() {
      // Toggle application details
      document.querySelectorAll('.toggle-details').forEach(button => {
        button.addEventListener('click', function() {
          const card = this.closest('.card');
          const detailsSection = card.querySelector('.application-details');
          const icon = this.querySelector('i');
          
          if (detailsSection.style.display === 'block') {
            detailsSection.style.display = 'none';
            icon.className = 'fas fa-chevron-down';
          } else {
            detailsSection.style.display = 'block';
            icon.className = 'fas fa-chevron-up';
          }
        });
      });
      
      // Generate approval link buttons
      document.querySelectorAll('.generate-approval').forEach(button => {
        button.addEventListener('click', function() {
          const appId = this.dataset.id;
          generateApprovalLink(appId);
        });
      });
      
      // Show rejection modal buttons
      document.querySelectorAll('.show-rejection-modal').forEach(button => {
        button.addEventListener('click', function() {
          const appId = this.dataset.id;
          document.getElementById('rejectApplicationId').value = appId;
          const modal = new bootstrap.Modal(document.getElementById('rejectionModal'));
          modal.show();
        });
      });
      
      // View players buttons
      document.querySelectorAll('.view-players').forEach(button => {
        button.addEventListener('click', function() {
          const appId = this.dataset.id;
          viewPlayers(appId);
        });
      });
      
      // Show approval link buttons
      document.querySelectorAll('.show-approval-link').forEach(button => {
        button.addEventListener('click', function() {
          const appId = this.dataset.id;
          showApprovalLink(appId);
        });
      });
    }

    function generateApprovalLink(appId) {
      // In a real implementation, this would be an API call
      currentApplicationId = appId;
      
      // Simulate API call
      fetch(`/generate-approval/${appId}`, {
        method: 'POST'
      })
        .then(response => response.json())
        .then(data => {
          approvalUrl = data.approvalUrl;
          showApprovalLinkModal(approvalUrl);
          
          // Update application in local data
          const appIndex = applications.findIndex(app => app._id === appId);
          if (appIndex !== -1) {
            applications[appIndex].approvalToken = data.approvalToken;
            applications[appIndex].approvalExpires = data.approvalExpires;
            renderApplications();
          }
          
          showToast('Success', 'Approval link generated successfully', 'success');
        })
        .catch(error => {
          console.error('Error generating approval link:', error);
          showToast('Error', 'Failed to generate approval link', 'danger');
        });
    }

    function showApprovalLink(appId) {
      // Find application with approval token
      const app = applications.find(a => a._id === appId);
      if (!app || !app.approvalToken) {
        showToast('Error', 'No approval link available', 'danger');
        return;
      }
      
      // Construct approval URL
      const baseUrl = window.location.origin;
      approvalUrl = `${baseUrl}/approve/${app.approvalToken}`;
      
      showApprovalLinkModal(approvalUrl);
    }

    function showApprovalLinkModal(linkUrl) {
      document.getElementById('approvalLinkContainer').textContent = linkUrl;
      const modal = new bootstrap.Modal(document.getElementById('approvalLinkModal'));
      modal.show();
    }

    function copyApprovalLink() {
      const linkText = document.getElementById('approvalLinkContainer').textContent;
      navigator.clipboard.writeText(linkText)
        .then(() => {
          showToast('Success', 'Link copied to clipboard', 'success');
        })
        .catch(err => {
          console.error('Failed to copy link:', err);
          showToast('Error', 'Failed to copy link', 'danger');
        });
    }

    function rejectApplication() {
      const appId = document.getElementById('rejectApplicationId').value;
      const reason = document.getElementById('rejectionReason').value.trim();
      
      if (!reason) {
        showToast('Error', 'Please provide a reason for rejection', 'danger');
        return;
      }
      
      // In a real implementation, this would be an API call
      fetch(`/reject/${appId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ rejectionReason: reason })
      })
        .then(response => response.json())
        .then(data => {
          // Update application in local data
          const appIndex = applications.findIndex(app => app._id === appId);
          if (appIndex !== -1) {
            applications[appIndex].status = 'rejected';
            applications[appIndex].rejectionReason = reason;
            renderApplications();
            updateCounts();
          }
          
          // Hide modal
          const modal = bootstrap.Modal.getInstance(document.getElementById('rejectionModal'));
          modal.hide();
          
          // Reset form
          document.getElementById('rejectionForm').reset();
          
          showToast('Success', 'Application rejected successfully', 'success');
        })
        .catch(error => {
          console.error('Error rejecting application:', error);
          showToast('Error', 'Failed to reject application', 'danger');
        });
    }

    function viewPlayers(appId) {
      // In a real implementation, this would be an API call to fetch players
      fetch(`/api/players/registrar/${appId}`)
        .then(response => response.json())
        .then(players => {
          const container = document.getElementById('playerDetailsContainer');
          
          if (players.length === 0) {
            container.innerHTML = '<div class="alert alert-info">No players registered for this school.</div>';
          } else {
            container.innerHTML = `
              <div class="table-responsive">
                <table class="table table-striped">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Date of Birth</th>
                      <th>School ID</th>
                      <th>Parent Email</th>
                      <th>Parent Phone</th>
                      <th>ID Card Photo</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${players.map(player => `
                      <tr>
                        <td>${player.name}</td>
                        <td>${new Date(player.dateOfBirth).toLocaleDateString()}</td>
                        <td>${player.schoolId}</td>
                        <td>${player.parentEmail}</td>
                        <td>${player.parentPhone}</td>
                        <td>
                          ${player.idCardPhoto ? 
                            `<img src="/${player.idCardPhoto}" alt="ID Card" class="player-photo">` : 
                            'No photo uploaded'}
                        </td>
                      </tr>
                    `).join('')}
                  </tbody>
                </table>
              </div>
            `;
          }
          
          const modal = new bootstrap.Modal(document.getElementById('playerDetailsModal'));
          modal.show();
        })
        .catch(error => {
          console.error('Error fetching players:', error);
          showToast('Error', 'Failed to load players', 'danger');
        });
    }

    function showToast(title, message, type) {
      const toastContainer = document.getElementById('toast-container');
      const toastId = 'toast-' + Date.now();
      
      const toast = document.createElement('div');
      toast.className = `toast show bg-${type} text-white`;
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      toast.id = toastId;
      
      toast.innerHTML = `
        <div class="toast-header">
          <strong class="me-auto">${title}</strong>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
          ${message}
        </div>
      `;
      
      toastContainer.appendChild(toast);
      
      // Auto hide after 3 seconds
      setTimeout(() => {
        const toastElement = document.getElementById(toastId);
        if (toastElement) {
          toastElement.remove();
        }
      }, 3000);
    }

    // For demo purposes - simulate API responses
    // In a real implementation, these would be handled by actual API calls
    window.addEventListener('fetch', function(event) {
      const url = new URL(event.request.url);
      
      // Simulate API response for registrars
      if (url.pathname === '/api/registrars') {
        event.respondWith(
          new Response(JSON.stringify([
            {
              _id: '1',
              schoolName: 'Washington High School',
              email: 'principal@washingtonhs.edu',
              authorizingPerson: 'John Smith',
              registrationDate: '2023-03-01T10:30:00Z',
              status: 'pending'
            },
            {
              _id: '2',
              schoolName: 'Lincoln Academy',
              email: 'admin@lincolnacademy.org',
              authorizingPerson: 'Sarah Johnson',
              registrationDate: '2023-02-28T14:15:00Z',
              status: 'approved',
              approvalToken: 'abc123',
              approvalExpires: '2023-03-10T14:15:00Z'
            },
            {
              _id: '3',
              schoolName: 'Jefferson Middle School',
              email: 'principal@jeffersonms.edu',
              authorizingPerson: 'Michael Brown',
              registrationDate: '2023-02-25T09:45:00Z',
              status: 'rejected',
              rejectionReason: 'Missing required documentation. Please reapply with complete information.'
            }
          ]), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          })
        );
      }
      
      // Simulate API response for players
      if (url.pathname.startsWith('/api/players/registrar/')) {
        const registrarId = url.pathname.split('/').pop();
        
        // Different players for different registrars
        let players = [];
        if (registrarId === '1') {
          players = [
            {
              _id: 'p1',
              name: 'Alex Johnson',
              dateOfBirth: '2007-05-15T00:00:00Z',
              schoolId: 'WHS-123',
              parentEmail: 'parent1@example.com',
              parentPhone: '555-123-4567',
              idCardPhoto: 'uploads/players/player-1.jpg'
            },
            {
              _id: 'p2',
              name: 'Taylor Smith',
              dateOfBirth: '2006-09-22T00:00:00Z',
              schoolId: 'WHS-456',
              parentEmail: 'parent2@example.com',
              parentPhone: '555-987-6543',
              idCardPhoto: null
            }
          ];
        } else if (registrarId === '2') {
          players = [
            {
              _id: 'p3',
              name: 'Jordan Williams',
              dateOfBirth: '2007-03-10T00:00:00Z',
              schoolId: 'LA-789',
              parentEmail: 'parent3@example.com',
              parentPhone: '555-222-3333',
              idCardPhoto: 'uploads/players/player-3.jpg'
            }
          ];
        } else {
          players = [];
        }
        
        event.respondWith(
          new Response(JSON.stringify(players), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          })
        );
      }
      
      // Simulate API response for approval generation
      if (url.pathname.startsWith('/generate-approval/')) {
        event.respondWith(
          new Response(JSON.stringify({
            approvalToken: 'newtokenxyz' + Date.now(),
            approvalExpires: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            approvalUrl: window.location.origin + '/approve/newtokenxyz' + Date.now()
          }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          })
        );
      }
      
      // Simulate API response for rejection
      if (url.pathname.startsWith('/reject/')) {
        event.respondWith(
          new Response(JSON.stringify({
            success: true
          }), {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          })
        );
      }
    });
  </script>
</body>
</html>